{"id":"node_modules/core-js/modules/esnext.math.sum-precise.js","dependencies":[{"name":"C:\\Users\\khada\\Desktop\\naruto\\javascript\\complete-javascript-course-master\\forkify\\package.json","includedInParent":true,"mtime":1720078044283},{"name":"C:\\Users\\khada\\Desktop\\naruto\\javascript\\complete-javascript-course-master\\forkify\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1720078043294},{"name":"../internals/export","loc":{"line":4,"column":16,"index":225},"parent":"C:\\Users\\khada\\Desktop\\naruto\\javascript\\complete-javascript-course-master\\forkify\\node_modules\\core-js\\modules\\esnext.math.sum-precise.js","resolved":"C:\\Users\\khada\\Desktop\\naruto\\javascript\\complete-javascript-course-master\\forkify\\node_modules\\core-js\\internals\\export.js"},{"name":"../internals/function-uncurry-this","loc":{"line":5,"column":26,"index":275},"parent":"C:\\Users\\khada\\Desktop\\naruto\\javascript\\complete-javascript-course-master\\forkify\\node_modules\\core-js\\modules\\esnext.math.sum-precise.js","resolved":"C:\\Users\\khada\\Desktop\\naruto\\javascript\\complete-javascript-course-master\\forkify\\node_modules\\core-js\\internals\\function-uncurry-this.js"},{"name":"../internals/iterate","loc":{"line":6,"column":22,"index":336},"parent":"C:\\Users\\khada\\Desktop\\naruto\\javascript\\complete-javascript-course-master\\forkify\\node_modules\\core-js\\modules\\esnext.math.sum-precise.js","resolved":"C:\\Users\\khada\\Desktop\\naruto\\javascript\\complete-javascript-course-master\\forkify\\node_modules\\core-js\\internals\\iterate.js"}],"generated":{"js":"'use strict';\n// based on Shewchuk's algorithm for exactly floating point addition\n// adapted from https://github.com/tc39/proposal-math-sum/blob/3513d58323a1ae25560e8700aa5294500c6c9287/polyfill/polyfill.mjs\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar iterate = require('../internals/iterate');\n\nvar $RangeError = RangeError;\nvar $TypeError = TypeError;\nvar $Infinity = Infinity;\nvar $NaN = NaN;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar push = uncurryThis([].push);\n\nvar POW_2_1023 = pow(2, 1023);\nvar MAX_SAFE_INTEGER = pow(2, 53) - 1; // 2 ** 53 - 1 === 9007199254740992\nvar MAX_DOUBLE = Number.MAX_VALUE; // 2 ** 1024 - 2 ** (1023 - 52) === 1.79769313486231570815e+308\nvar MAX_ULP = pow(2, 971); // 2 ** (1023 - 52) === 1.99584030953471981166e+292\n\nvar NOT_A_NUMBER = {};\nvar MINUS_INFINITY = {};\nvar PLUS_INFINITY = {};\nvar MINUS_ZERO = {};\nvar FINITE = {};\n\n// prerequisite: abs(x) >= abs(y)\nvar twosum = function (x, y) {\n  var hi = x + y;\n  var lo = y - (hi - x);\n  return { hi: hi, lo: lo };\n};\n\n// `Math.sumPrecise` method\n// https://github.com/tc39/proposal-math-sum\n$({ target: 'Math', stat: true, forced: true }, {\n  // eslint-disable-next-line max-statements -- ok\n  sumPrecise: function sumPrecise(items) {\n    var numbers = [];\n    var count = 0;\n    var state = MINUS_ZERO;\n\n    iterate(items, function (n) {\n      if (++count >= MAX_SAFE_INTEGER) throw new $RangeError('Maximum allowed index exceeded');\n      if (typeof n != 'number') throw new $TypeError('Value is not a number');\n      if (state !== NOT_A_NUMBER) {\n        // eslint-disable-next-line no-self-compare -- NaN check\n        if (n !== n) state = NOT_A_NUMBER;\n        else if (n === $Infinity) state = state === MINUS_INFINITY ? NOT_A_NUMBER : PLUS_INFINITY;\n        else if (n === -$Infinity) state = state === PLUS_INFINITY ? NOT_A_NUMBER : MINUS_INFINITY;\n        else if ((n !== 0 || (1 / n) === $Infinity) && (state === MINUS_ZERO || state === FINITE)) {\n          state = FINITE;\n          push(numbers, n);\n        }\n      }\n    });\n\n    switch (state) {\n      case NOT_A_NUMBER: return $NaN;\n      case MINUS_INFINITY: return -$Infinity;\n      case PLUS_INFINITY: return $Infinity;\n      case MINUS_ZERO: return -0;\n    }\n\n    var partials = [];\n    var overflow = 0; // conceptually 2 ** 1024 times this value; the final partial is biased by this amount\n    var x, y, sum, hi, lo, tmp;\n\n    for (var i = 0; i < numbers.length; i++) {\n      x = numbers[i];\n      var actuallyUsedPartials = 0;\n      for (var j = 0; j < partials.length; j++) {\n        y = partials[j];\n        if (abs(x) < abs(y)) {\n          tmp = x;\n          x = y;\n          y = tmp;\n        }\n        sum = twosum(x, y);\n        hi = sum.hi;\n        lo = sum.lo;\n        if (abs(hi) === $Infinity) {\n          var sign = hi === $Infinity ? 1 : -1;\n          overflow += sign;\n\n          x = (x - (sign * POW_2_1023)) - (sign * POW_2_1023);\n          if (abs(x) < abs(y)) {\n            tmp = x;\n            x = y;\n            y = tmp;\n          }\n          sum = twosum(x, y);\n          hi = sum.hi;\n          lo = sum.lo;\n        }\n        if (lo !== 0) partials[actuallyUsedPartials++] = lo;\n        x = hi;\n      }\n      partials.length = actuallyUsedPartials;\n      if (x !== 0) push(partials, x);\n    }\n\n    // compute the exact sum of partials, stopping once we lose precision\n    var n = partials.length - 1;\n    hi = 0;\n    lo = 0;\n\n    if (overflow !== 0) {\n      var next = n >= 0 ? partials[n] : 0;\n      n--;\n      if (abs(overflow) > 1 || (overflow > 0 && next > 0) || (overflow < 0 && next < 0)) {\n        return overflow > 0 ? $Infinity : -$Infinity;\n      }\n      // here we actually have to do the arithmetic\n      // drop a factor of 2 so we can do it without overflow\n      // assert(abs(overflow) === 1)\n      sum = twosum(overflow * POW_2_1023, next / 2);\n      hi = sum.hi;\n      lo = sum.lo;\n      lo *= 2;\n      if (abs(2 * hi) === $Infinity) {\n        // rounding to the maximum value\n        if (hi > 0) {\n          return (hi === POW_2_1023 && lo === -(MAX_ULP / 2) && n >= 0 && partials[n] < 0) ? MAX_DOUBLE : $Infinity;\n        } return (hi === -POW_2_1023 && lo === (MAX_ULP / 2) && n >= 0 && partials[n] > 0) ? -MAX_DOUBLE : -$Infinity;\n      }\n\n      if (lo !== 0) {\n        partials[++n] = lo;\n        lo = 0;\n      }\n\n      hi *= 2;\n    }\n\n    while (n >= 0) {\n      sum = twosum(hi, partials[n--]);\n      hi = sum.hi;\n      lo = sum.lo;\n      if (lo !== 0) break;\n    }\n\n    if (n >= 0 && ((lo < 0 && partials[n] < 0) || (lo > 0 && partials[n] > 0))) {\n      y = lo * 2;\n      x = hi + y;\n      if (y === x - hi) hi = x;\n    }\n\n    return hi;\n  }\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/core-js/modules/esnext.math.sum-precise.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}}],"sources":{"node_modules/core-js/modules/esnext.math.sum-precise.js":"'use strict';\n// based on Shewchuk's algorithm for exactly floating point addition\n// adapted from https://github.com/tc39/proposal-math-sum/blob/3513d58323a1ae25560e8700aa5294500c6c9287/polyfill/polyfill.mjs\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar iterate = require('../internals/iterate');\n\nvar $RangeError = RangeError;\nvar $TypeError = TypeError;\nvar $Infinity = Infinity;\nvar $NaN = NaN;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar push = uncurryThis([].push);\n\nvar POW_2_1023 = pow(2, 1023);\nvar MAX_SAFE_INTEGER = pow(2, 53) - 1; // 2 ** 53 - 1 === 9007199254740992\nvar MAX_DOUBLE = Number.MAX_VALUE; // 2 ** 1024 - 2 ** (1023 - 52) === 1.79769313486231570815e+308\nvar MAX_ULP = pow(2, 971); // 2 ** (1023 - 52) === 1.99584030953471981166e+292\n\nvar NOT_A_NUMBER = {};\nvar MINUS_INFINITY = {};\nvar PLUS_INFINITY = {};\nvar MINUS_ZERO = {};\nvar FINITE = {};\n\n// prerequisite: abs(x) >= abs(y)\nvar twosum = function (x, y) {\n  var hi = x + y;\n  var lo = y - (hi - x);\n  return { hi: hi, lo: lo };\n};\n\n// `Math.sumPrecise` method\n// https://github.com/tc39/proposal-math-sum\n$({ target: 'Math', stat: true, forced: true }, {\n  // eslint-disable-next-line max-statements -- ok\n  sumPrecise: function sumPrecise(items) {\n    var numbers = [];\n    var count = 0;\n    var state = MINUS_ZERO;\n\n    iterate(items, function (n) {\n      if (++count >= MAX_SAFE_INTEGER) throw new $RangeError('Maximum allowed index exceeded');\n      if (typeof n != 'number') throw new $TypeError('Value is not a number');\n      if (state !== NOT_A_NUMBER) {\n        // eslint-disable-next-line no-self-compare -- NaN check\n        if (n !== n) state = NOT_A_NUMBER;\n        else if (n === $Infinity) state = state === MINUS_INFINITY ? NOT_A_NUMBER : PLUS_INFINITY;\n        else if (n === -$Infinity) state = state === PLUS_INFINITY ? NOT_A_NUMBER : MINUS_INFINITY;\n        else if ((n !== 0 || (1 / n) === $Infinity) && (state === MINUS_ZERO || state === FINITE)) {\n          state = FINITE;\n          push(numbers, n);\n        }\n      }\n    });\n\n    switch (state) {\n      case NOT_A_NUMBER: return $NaN;\n      case MINUS_INFINITY: return -$Infinity;\n      case PLUS_INFINITY: return $Infinity;\n      case MINUS_ZERO: return -0;\n    }\n\n    var partials = [];\n    var overflow = 0; // conceptually 2 ** 1024 times this value; the final partial is biased by this amount\n    var x, y, sum, hi, lo, tmp;\n\n    for (var i = 0; i < numbers.length; i++) {\n      x = numbers[i];\n      var actuallyUsedPartials = 0;\n      for (var j = 0; j < partials.length; j++) {\n        y = partials[j];\n        if (abs(x) < abs(y)) {\n          tmp = x;\n          x = y;\n          y = tmp;\n        }\n        sum = twosum(x, y);\n        hi = sum.hi;\n        lo = sum.lo;\n        if (abs(hi) === $Infinity) {\n          var sign = hi === $Infinity ? 1 : -1;\n          overflow += sign;\n\n          x = (x - (sign * POW_2_1023)) - (sign * POW_2_1023);\n          if (abs(x) < abs(y)) {\n            tmp = x;\n            x = y;\n            y = tmp;\n          }\n          sum = twosum(x, y);\n          hi = sum.hi;\n          lo = sum.lo;\n        }\n        if (lo !== 0) partials[actuallyUsedPartials++] = lo;\n        x = hi;\n      }\n      partials.length = actuallyUsedPartials;\n      if (x !== 0) push(partials, x);\n    }\n\n    // compute the exact sum of partials, stopping once we lose precision\n    var n = partials.length - 1;\n    hi = 0;\n    lo = 0;\n\n    if (overflow !== 0) {\n      var next = n >= 0 ? partials[n] : 0;\n      n--;\n      if (abs(overflow) > 1 || (overflow > 0 && next > 0) || (overflow < 0 && next < 0)) {\n        return overflow > 0 ? $Infinity : -$Infinity;\n      }\n      // here we actually have to do the arithmetic\n      // drop a factor of 2 so we can do it without overflow\n      // assert(abs(overflow) === 1)\n      sum = twosum(overflow * POW_2_1023, next / 2);\n      hi = sum.hi;\n      lo = sum.lo;\n      lo *= 2;\n      if (abs(2 * hi) === $Infinity) {\n        // rounding to the maximum value\n        if (hi > 0) {\n          return (hi === POW_2_1023 && lo === -(MAX_ULP / 2) && n >= 0 && partials[n] < 0) ? MAX_DOUBLE : $Infinity;\n        } return (hi === -POW_2_1023 && lo === (MAX_ULP / 2) && n >= 0 && partials[n] > 0) ? -MAX_DOUBLE : -$Infinity;\n      }\n\n      if (lo !== 0) {\n        partials[++n] = lo;\n        lo = 0;\n      }\n\n      hi *= 2;\n    }\n\n    while (n >= 0) {\n      sum = twosum(hi, partials[n--]);\n      hi = sum.hi;\n      lo = sum.lo;\n      if (lo !== 0) break;\n    }\n\n    if (n >= 0 && ((lo < 0 && partials[n] < 0) || (lo > 0 && partials[n] > 0))) {\n      y = lo * 2;\n      x = hi + y;\n      if (y === x - hi) hi = x;\n    }\n\n    return hi;\n  }\n});\n"},"lineCount":152}},"error":null,"hash":"86507c376eec93b324ea521979af2721","cacheData":{"env":{}}}